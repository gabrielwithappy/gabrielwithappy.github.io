<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>BookShelf</title>
<link>https://gabrielwithappy.github.io/docs/blog/index.html</link>
<atom:link href="https://gabrielwithappy.github.io/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>A online bookstore</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Sun, 10 Sep 2023 15:00:00 GMT</lastBuildDate>
<item>
  <title>Pandas 데이터프레임 머지</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/index.html</link>
  <description><![CDATA[ 



<section id="테이터프레임-머지하기" class="level1">
<h1>테이터프레임 머지하기</h1>
<p>병합은 서로다른 데이터프레임 객체에 동일하게 존재하는 값을 통해 양쪽 데이터를 연관 지어 하나의 데이터프레임으로 모델링할 수 있는 유용한 방법입니다. 연습을 위해서 데이터를 준비합니다.</p>
<p><code>Yahoo Finance</code>에서는 미국뿐 아니라 한국 주식에 대한 정보를 제공합니다. <code>KOSPI</code>주식 정보를 csv형태로 저장해서 데이터프레임 머지 연습에 사용할께요. <a href="https://finance.yahoo.com/quote/%5EKS11?p=%5EKS11&amp;.tsrc=fin-srch">Yahoo Finance</a>로 이동해서 <code>historica l data</code> 탭을 선택합니다.</p>
<p><img src="https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/images/paste-1.png" class="img-fluid"></p>
<p><code>Historical Data</code> 를 선택하면 위와 같이 <code>KOSPI</code> 에 대한 시계열 데이터를 얻을 수 있습니다. <code>download</code>를 눌러 다운로드하여 저장합니다. 혹은 [<a href="./^KS11.csv">KS11.csv</a>]에서 다운로드 하세요.</p>
<section id="데이터-로드하기" class="level2">
<h2 class="anchored" data-anchor-id="데이터-로드하기">데이터 로드하기</h2>
<p>csv파일을 불러와서 데이터프레임 형태를 확인합니다. 시계열데이터의 경우 날짜정보를 데이터프레임의 <code>index</code>로 사용하면 편리합니다. <code>data</code>컬럼을 index로 설정합니다.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2">kospi <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"./^KS11.csv"</span>, index_col <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Date'</span>)</span>
<span id="cb1-3">kospi.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-09-13</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>366900</td>
    </tr>
    <tr>
      <th>2022-09-14</th>
      <td>2390.469971</td>
      <td>2418.419922</td>
      <td>2381.500000</td>
      <td>2411.419922</td>
      <td>2411.419922</td>
      <td>461300</td>
    </tr>
    <tr>
      <th>2022-09-15</th>
      <td>2416.010010</td>
      <td>2421.629883</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>423900</td>
    </tr>
    <tr>
      <th>2022-09-16</th>
      <td>2387.560059</td>
      <td>2395.100098</td>
      <td>2371.110107</td>
      <td>2382.780029</td>
      <td>2382.780029</td>
      <td>440300</td>
    </tr>
    <tr>
      <th>2022-09-19</th>
      <td>2388.729980</td>
      <td>2389.850098</td>
      <td>2352.760010</td>
      <td>2355.659912</td>
      <td>2355.659912</td>
      <td>403700</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>날짜정보가 index로 설정된 데이터프레임을 생성했습니다. 이제 연결을 위한 새로운 데이터프레임을 생성합니다. 데이트 프레임을 연결할 정보를 <code>Ticker</code>라는 컬럼으로 설정하고 기존 데이터프레임의 <code>Volume</code>컬럼을 추가합니다.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">kospi_volume <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame ({<span class="st" style="color: #20794D;">'Ticker'</span>: <span class="st" style="color: #20794D;">'kospi'</span>, <span class="st" style="color: #20794D;">'Volume'</span> : kospi[<span class="st" style="color: #20794D;">'Volume'</span>]})</span>
<span id="cb2-2">kospi_volume.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Ticker</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-09-13</th>
      <td>kospi</td>
      <td>366900</td>
    </tr>
    <tr>
      <th>2022-09-14</th>
      <td>kospi</td>
      <td>461300</td>
    </tr>
    <tr>
      <th>2022-09-15</th>
      <td>kospi</td>
      <td>423900</td>
    </tr>
    <tr>
      <th>2022-09-16</th>
      <td>kospi</td>
      <td>440300</td>
    </tr>
    <tr>
      <th>2022-09-19</th>
      <td>kospi</td>
      <td>403700</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>2개의 데이터프레임이 함께 갖는 컬럼인 ’Ticker’를 통해서 병합을 진행하고 이를 통해서 <code>Volume</code>정보를 추가하려고 합니다. 올바르게 동작하는 지 확인하기 위해서 기존 데이터프레임의 <code>Volume</code> 컬럼을 삭제합니다.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">kospi[<span class="st" style="color: #20794D;">'Ticker'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'kospi'</span></span>
<span id="cb3-2">kospi.pop(<span class="st" style="color: #20794D;">'Volume'</span>)</span>
<span id="cb3-3">kospi.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Ticker</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-09-13</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-14</th>
      <td>2390.469971</td>
      <td>2418.419922</td>
      <td>2381.500000</td>
      <td>2411.419922</td>
      <td>2411.419922</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-15</th>
      <td>2416.010010</td>
      <td>2421.629883</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-16</th>
      <td>2387.560059</td>
      <td>2395.100098</td>
      <td>2371.110107</td>
      <td>2382.780029</td>
      <td>2382.780029</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-19</th>
      <td>2388.729980</td>
      <td>2389.850098</td>
      <td>2352.760010</td>
      <td>2355.659912</td>
      <td>2355.659912</td>
      <td>kospi</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><code>Volume</code>컬럼이 삭제되었으니 병합을 진행합니다. <code>pd.merge()</code>함수를 사용하고 공통 컬럼인 <code>Ticker</code>컬럼을 전달합니다.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">merged_df <span class="op" style="color: #5E5E5E;">=</span> pd.merge(kospi, kospi_volume, on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Ticker'</span>)</span>
<span id="cb4-2">merged_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Ticker</th>
      <th>Volume</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>366900</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>461300</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>423900</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>440300</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>403700</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>이제 새로운 <code>merged_df</code> 데이터프레임은 2개의 데이터프레임을 연결하여 <code>Volume</code>정보를 추가 하였습니다.</p>


</section>
</section>

 ]]></description>
  <category>Pandas</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/index.html</guid>
  <pubDate>Sun, 10 Sep 2023 15:00:00 GMT</pubDate>
  <media:content url="https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/images/paste-1.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>Quarto Callout Block</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-10-quarto-callout/index.html</link>
  <description><![CDATA[ 



<p>Quarto를 이용해 문서를 작성하는 과정에서 강조할 내용이 있는 경우 <code>Callout Block</code>을 사용하는 것이 좋습니다. 자산이 작성한 글에 집중이 필요한 내용을 명확하게 나타낼 수 있습니다. 공부한 내용을 정리합니다.</p>
<section id="callout-종류" class="level2">
<h2 class="anchored" data-anchor-id="callout-종류">Callout 종류</h2>
<p><code>Callout Block</code>은 총 아래의 <code>note</code>, <code>warning</code>, <code>important</code>, <code>tip</code>, <code>caution</code> 5가지 종류를 갖습니다. 실제 어떻게 적용되는지 아래에서 살펴보세요.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>note</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>warning</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>important</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>tip</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Danger
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>caution</code> 타입을 사용합니다.</p>
</div>
</div>
<p>Markdown으로 어떻게 구현하는 지 확인해봅시다. <code>:::</code> 키워드를 사용했고 <code>Callout Block</code>형식은 <code>{}</code>로 표시합니다.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">::: {.callout-caution}</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;"># 제목을 추가합니다.</span></span>
<span id="cb1-3">Callout <span class="in" style="color: #5E5E5E;">`caution`</span> 타입을 사용합니다.</span>
<span id="cb1-4">:::</span></code></pre></div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
제목을 추가합니다.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>caution</code> 타입을 사용합니다.</p>
</div>
</div>
</section>
<section id="다양한-사용자-설정" class="level2">
<h2 class="anchored" data-anchor-id="다양한-사용자-설정">다양한 사용자 설정</h2>
<section id="제목-추가하기" class="level3">
<h3 class="anchored" data-anchor-id="제목-추가하기">제목 추가하기</h3>
<p>아이콘은 유지하고 제목을 변경하고 싶은 경우가 있습니다. 이 경우 <code>header</code> 마크다운을 사용합니다.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">::: {.callout-caution}</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;"># 제목을 추가합니다.</span></span>
<span id="cb2-3">Callout <span class="in" style="color: #5E5E5E;">`caution`</span> 타입을 사용합니다.</span>
<span id="cb2-4">:::</span></code></pre></div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
제목을 추가합니다.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>caution</code> 타입을 사용합니다.</p>
</div>
</div>
</section>
<section id="형태-변경하기" class="level3">
<h3 class="anchored" data-anchor-id="형태-변경하기">형태 변경하기</h3>
<p><code>Callout Block</code>의 외형은 <code>default</code>, <code>simple</code>, <code>minimam</code> 형태를 지원합니다. 각각이 어떻게 표현되는지 알아봅니다.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Default 외형
</div>
</div>
<div class="callout-body-container callout-body">
<p>default 외형을 확인합니다.</p>
</div>
</div>
<div class="callout-note callout callout-style-simple callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
simple 외형
</div>
</div>
<div class="callout-body-container callout-body">
<p>simple 외형을 확인합니다.</p>
</div>
</div>
<div class="callout-note callout callout-style-simple no-icon callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
minimal 외형
</div>
</div>
<div class="callout-body-container callout-body">
<p>minimal 외형을 확인합니다.</p>
</div>
</div>
<p>코드는 아래와 같이 사용합니다. <code>appearance</code>가 추가되었습니다.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">::: {.callout-note appearance="minimal"}</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;"># Default 외형</span></span>
<span id="cb3-3">default 외형을 확인합니다.</span>
<span id="cb3-4">:::</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>Quarto</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-10-quarto-callout/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Pandas 데이터 전처리</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-datatype-transform/index.html</link>
  <description><![CDATA[ 



<section id="테이터-전처리" class="level1">
<h1>테이터 전처리</h1>
<p>데이터시각화 및 데이터분석을 위해 읽어온 원본 데이터의 데이터 타입이 올바른지 확인하지 않으면 분석과정에 사용하는 다양한 통계적 지표나 필터결과가 오류를 발생합니다. 데이터에 맞는 형식으로 변경되지 않은 데이터프레임을 사용할 때 발생하는 문제점을 확인하고 올바르게 데이터 형식으로 변경하는 과정을 정리합니다.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> datetime <span class="im" style="color: #00769E;">as</span> dt</span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">"year"</span>: [<span class="st" style="color: #20794D;">'1900'</span>,<span class="st" style="color: #20794D;">'1901'</span>,<span class="st" style="color: #20794D;">'1910'</span>,<span class="st" style="color: #20794D;">'2021'</span>, <span class="st" style="color: #20794D;">'2023'</span>],</span>
<span id="cb1-5">                   <span class="st" style="color: #20794D;">"n_sales"</span> : [<span class="st" style="color: #20794D;">'10EA'</span>, <span class="st" style="color: #20794D;">'20EA'</span>, <span class="st" style="color: #20794D;">'40EA'</span>, <span class="st" style="color: #20794D;">'100EA'</span>, <span class="st" style="color: #20794D;">'210EA'</span>],</span>
<span id="cb1-6">                   <span class="st" style="color: #20794D;">"status"</span> : [<span class="st" style="color: #20794D;">'good'</span>, <span class="st" style="color: #20794D;">'bad'</span>, <span class="st" style="color: #20794D;">'normal'</span>, <span class="st" style="color: #20794D;">'bad'</span>, <span class="st" style="color: #20794D;">'good'</span>]})</span>
<span id="cb1-7">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>year</th>
      <th>n_sales</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1900</td>
      <td>10EA</td>
      <td>good</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1901</td>
      <td>20EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1910</td>
      <td>40EA</td>
      <td>normal</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2021</td>
      <td>100EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023</td>
      <td>210EA</td>
      <td>good</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>데이터 프레임은 <code>year</code>, <code>n_sales</code>, <code>status</code> 3개의 컬럼을 갖습니다. 각 컬럼이 어떤 데이터 타입인지 확인해볼까요? 데이터프레임의 정보를 보여주는 <code>info()</code>함수로 데이터 타입을 확인합니다.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
 #   Column   Non-Null Count  Dtype 
---  ------   --------------  ----- 
 0   year     5 non-null      object
 1   n_sales  5 non-null      object
 2   status   5 non-null      object
dtypes: object(3)
memory usage: 248.0+ bytes</code></pre>
</div>
</div>
<p>예상했던 데이터 형식과 다릅니다. <code>n_sales</code>는 숫자를 표현하고 있기 때문에 <code>int</code> 타입으로 표현되어야 할 것 같은데 <code>object</code>타입이네요. 데이터 프레임의 통계정보를 보여주는 <code>describe()</code>함수를 사용하면 차이를 알 수 있습니다.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df[<span class="st" style="color: #20794D;">'n_sales'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>count        5
unique       5
top       10EA
freq         1
Name: n_sales, dtype: object</code></pre>
</div>
</div>
<p>위의 코드 실행결과에서 확인할 수 있는 것처럼 <code>n_sales</code>컬럼의 통계 정보는 <code>categorical</code> 통계정보가 출력됩니다. 숫자로 표현되지 않아서 예상했던 <code>평균</code>, <code>표준편차</code> 등의 정보는 알 수 없습니다.</p>
<section id="데이터-타입-변경하기" class="level2">
<h2 class="anchored" data-anchor-id="데이터-타입-변경하기">데이터 타입 변경하기</h2>
<p>데이터에 대한 적절한 전처리가 되지 않는 경우 잘못된 통계정보를 이용할 수 있기 때문에 적절한 전처리가 필요합니다. 위에서 만든 데이터프레임의 각 컬럼에 올바른 데이터타입을 적용해야 합니다.</p>
<div class="cell" data-execution_count="4">
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>year</th>
      <th>n_sales</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1900</td>
      <td>10EA</td>
      <td>good</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1901</td>
      <td>20EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1910</td>
      <td>40EA</td>
      <td>normal</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2021</td>
      <td>100EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023</td>
      <td>210EA</td>
      <td>good</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>일반적으로 데이터 타입 변경은 데이터에 대한 이해가 필요합니다. <code>year</code>의 경우 날짜를 표현하고 있고 <code>n_sales</code>의 <code>EA</code>는 단위이기 때문에 꼭 필요한 정보가 아니라면 삭제 가능합니다. 이 두 가지 데이터 컬럼은 숫자를 표현하고 있으니 <code>int</code> 타입으로 변경합니다. 마지막 <code>status</code> 컬럼은 명백히 <code>categorical</code> 데이터입니다.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df[<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;">'year'</span>])</span>
<span id="cb6-2">df[<span class="st" style="color: #20794D;">'n_sales'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'n_sales'</span>].<span class="bu" style="color: null;">str</span>.strip(<span class="st" style="color: #20794D;">'EA'</span>).astype(<span class="st" style="color: #20794D;">'int'</span>)</span>
<span id="cb6-3">df[<span class="st" style="color: #20794D;">'status'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'status'</span>].astype(<span class="st" style="color: #20794D;">'category'</span>)</span></code></pre></div>
</div>
<p>위의 <code>to_datatime()</code>과 <code>astype()</code>함수를 이용해서 각 컬럼을 ‘datetime’, ‘int’, ‘categorical’ 타입으로 변경했습니다. 단위를 제거하기 위해서 ‘strip()’ 함수를 사용한 것을 참고하세요.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
 #   Column   Non-Null Count  Dtype         
---  ------   --------------  -----         
 0   year     5 non-null      datetime64[ns]
 1   n_sales  5 non-null      int64         
 2   status   5 non-null      category      
dtypes: category(1), datetime64[ns](1), int64(1)
memory usage: 345.0 bytes</code></pre>
</div>
</div>
<p>수정된 데이터 프레임은 올바른 데이터 타입을 갖습니다. 이제 데이터프레임의 통계정보를 확인하겠습니다.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df[<span class="st" style="color: #20794D;">'n_sales'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>count      5.000000
mean      76.000000
std       82.643814
min       10.000000
25%       20.000000
50%       40.000000
75%      100.000000
max      210.000000
Name: n_sales, dtype: float64</code></pre>
</div>
</div>
<p>이제 예상한 것과 같이 <code>n_sales</code>에 대한 <code>평균</code>, <code>표준편차</code> 등의 통계정보를 확인할 수 있습니다.</p>


</section>
</section>

 ]]></description>
  <category>Pandas</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-datatype-transform/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
