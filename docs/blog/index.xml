<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>BookShelf</title>
<link>https://gabrielwithappy.github.io/docs/blog/index.html</link>
<atom:link href="https://gabrielwithappy.github.io/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>A online bookstore</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Tue, 12 Sep 2023 15:00:00 GMT</lastBuildDate>
<item>
  <title>Plotly Subpolt 만들기</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-13-plotly-subplot/index.html</link>
  <description><![CDATA[ 



<section id="plotly-subplot" class="level1">
<h1>Plotly Subplot</h1>
<p>Python으로 그래프를 그릴 여러개의 그래프를 비교하기 좋은 방법은 subplot을 이용한 방법인 것 같습니다. subplot을 만드는 방법과 subplot의 title작성하는 방법 그리고 subplot들에 대한 전체 title을 넣는 방법도 함께 정리합니다.</p>
<p>Plotly의 <code>make_subplots</code>함수로 subplot을 구성하고 ploty 그래프를 생성했습니다. <code>add_trace()</code>함수로 생성한 subplot에 그래프를 추가합니다.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> plotly.graph_objects <span class="im" style="color: #00769E;">as</span> go</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> plotly.subplots <span class="im" style="color: #00769E;">import</span> make_subplots</span>
<span id="cb1-3"></span>
<span id="cb1-4">fig <span class="op" style="color: #5E5E5E;">=</span> make_subplots(rows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, cols <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6">fig.add_trace(go.Scatter(x<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>], y<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>], name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"subplot 1"</span>),</span>
<span id="cb1-7">              row<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-8">fig.add_trace(go.Scatter(x<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">30</span>], y<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">300</span>], name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"subplot 2"</span>),</span>
<span id="cb1-9">              row<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">fig.show()</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>                            <div id="9da9c26b-2a5f-4bb4-bcfe-b251f774f118" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("9da9c26b-2a5f-4bb4-bcfe-b251f774f118")) {                    Plotly.newPlot(                        "9da9c26b-2a5f-4bb4-bcfe-b251f774f118",                        [{"name":"subplot 1","x":[1,2,3],"y":[4,5,6],"type":"scatter","xaxis":"x","yaxis":"y"},{"name":"subplot 2","x":[10,20,30],"y":[100,200,300],"type":"scatter","xaxis":"x2","yaxis":"y2"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"xaxis":{"anchor":"y","domain":[0.0,0.45]},"yaxis":{"anchor":"x","domain":[0.0,1.0]},"xaxis2":{"anchor":"y2","domain":[0.55,1.0]},"yaxis2":{"anchor":"x2","domain":[0.0,1.0]}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('9da9c26b-2a5f-4bb4-bcfe-b251f774f118');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<section id="subplot-세부설정" class="level2">
<h2 class="anchored" data-anchor-id="subplot-세부설정">Subplot 세부설정</h2>
<p>make_subplot의 세부 설정을 알아보고 어떻게 변경할 수 있는지 알아봅니다. 하나의 Y축을 2개의 subplot이 공유하도록 <code>shared_yaxes</code>를 사용합니다. 각각의 subplot의 크기는 <code>column_widths</code>로 변경할 수 있습니다. 2개의 subplot사이의 거리는 <code>horizontal_spacing</code>으로 정합니다.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> plotly.graph_objects <span class="im" style="color: #00769E;">as</span> go</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> plotly.subplots <span class="im" style="color: #00769E;">import</span> make_subplots</span>
<span id="cb2-3"></span>
<span id="cb2-4">fig <span class="op" style="color: #5E5E5E;">=</span> make_subplots(</span>
<span id="cb2-5">    rows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, cols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb2-6">    shared_yaxes<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb2-7">    horizontal_spacing<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb2-8">    column_widths<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.7</span>]</span>
<span id="cb2-9">)</span>
<span id="cb2-10"></span>
<span id="cb2-11"></span>
<span id="cb2-12">fig.add_trace(go.Scatter(x<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>], y<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>], name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"subplot 1"</span>),</span>
<span id="cb2-13">              row<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-14">fig.add_trace(go.Scatter(x<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">30</span>], y<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">30</span>], name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"subplot 2"</span>),</span>
<span id="cb2-15">              row<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17">fig.show()</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>                            <div id="ed048124-58b7-47bd-9977-77d3578d4ccc" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("ed048124-58b7-47bd-9977-77d3578d4ccc")) {                    Plotly.newPlot(                        "ed048124-58b7-47bd-9977-77d3578d4ccc",                        [{"name":"subplot 1","x":[1,2,3],"y":[4,5,6],"type":"scatter","xaxis":"x","yaxis":"y"},{"name":"subplot 2","x":[10,20,30],"y":[10,20,30],"type":"scatter","xaxis":"x2","yaxis":"y2"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"xaxis":{"anchor":"y","domain":[0.0,0.285]},"yaxis":{"anchor":"x","domain":[0.0,1.0]},"xaxis2":{"anchor":"y2","domain":[0.33499999999999996,0.9999999999999999]},"yaxis2":{"anchor":"x2","domain":[0.0,1.0],"matches":"y","showticklabels":false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('ed048124-58b7-47bd-9977-77d3578d4ccc');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
</section>
<section id="참고" class="level2">
<h2 class="anchored" data-anchor-id="참고">참고</h2>
<ol type="1">
<li>https://chancoding.tistory.com/229</li>
</ol>


</section>
</section>

 ]]></description>
  <category>Data Visualization</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-13-plotly-subplot/index.html</guid>
  <pubDate>Tue, 12 Sep 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/131/200/150" medium="image"/>
</item>
<item>
  <title>Markdown문법 정리하기</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-12-markdown/index.html</link>
  <description><![CDATA[ 



<section id="markdown" class="level1">
<h1>Markdown</h1>
<p>마크다운은 텍스트를 이용해 문서를 작성하는 도구입니다. 일반 텍스트를 이용해서 Table, 링크 등 다양한 문서형태를 작성할 수 있습니다. Quart는 Pandoc을 기반으로 하고 있으며 Markdown으로 문서를 작성합니다. 자주 사용하는 Markdown 문법을 정리합니다.</p>
<section id="text-formatting" class="level2">
<h2 class="anchored" data-anchor-id="text-formatting">Text Formatting</h2>
<p>텍스트의 형태를 변경하는 다양한 문법을 확인합니다.</p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Markdown Syntax</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">*italics*, **bold**, ***bold italics***</span></code></pre></div></td>
<td><em>italics</em>, <strong>bold</strong>, <strong><em>bold italics</em></strong></td>
</tr>
<tr class="even">
<td><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">superscript^2^ / subscript~2~</span></code></pre></div></td>
<td>superscript<sup>2</sup> / subscript<sub>2</sub></td>
</tr>
<tr class="odd">
<td><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">~~strikethrough~~</span></code></pre></div></td>
<td><del>strikethrough</del></td>
</tr>
</tbody>
</table>
</section>
<section id="link-및-이미지-연결" class="level2">
<h2 class="anchored" data-anchor-id="link-및-이미지-연결">Link 및 이미지 연결</h2>
<p>링크에 보일 글자와 함께 링크정보를 표시합니다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><span class="fu" style="color: #4758AB;"># 링크 연결</span></span>
<span id="cb4-2"><span class="ot" style="color: #003B4F;">&lt;https://quarto.org&gt;</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">[</span><span class="ot" style="color: #003B4F;">Quarto</span><span class="co" style="color: #5E5E5E;">](https://quarto/org)</span></span></code></pre></div>
<p><a href="https://quarto.org" class="uri">https://quarto.org</a> <a href="https://quarto/org">Quarto</a></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><span class="fu" style="color: #4758AB;"># 이미지표시</span></span>
<span id="cb5-2"><span class="al" style="color: #AD0000;">![Caption](cover.png)</span></span></code></pre></div>
<p><img src="https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-12-markdown/cover.jpg" class="img-fluid"></p>
</section>
<section id="table" class="level2">
<h2 class="anchored" data-anchor-id="table">Table</h2>
<p>Markdown으로 table을 구성하는 방법을 정리합니다.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">| Right | Left | Default | Center |</span>
<span id="cb6-2">|------:|:-----|---------|:------:|</span>
<span id="cb6-3">|   12  |  12  |    12   |    12  |</span>
<span id="cb6-4">|  123  |  123 |   123   |   123  |</span>
<span id="cb6-5">|    1  |    1 |     1   |     1  |</span></code></pre></div>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: right;">Right</th>
<th style="text-align: left;">Left</th>
<th>Default</th>
<th style="text-align: center;">Center</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">12</td>
<td style="text-align: left;">12</td>
<td>12</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="even">
<td style="text-align: right;">123</td>
<td style="text-align: left;">123</td>
<td>123</td>
<td style="text-align: center;">123</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">1</td>
<td>1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
</section>
<section id="소스-코드" class="level2">
<h2 class="anchored" data-anchor-id="소스-코드">소스 코드</h2>
<p>Quarto에서 소스코드를 추가하는 방법을 정리힙니다.</p>
<p>코드의 처음과 마지막에 <code>```</code>를 이용해서 코드 영역을 표시합니다.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"><span class="in" style="color: #5E5E5E;">```</span></span>
<span id="cb7-2"><span class="in" style="color: #5E5E5E;">code</span></span>
<span id="cb7-3"><span class="in" style="color: #5E5E5E;">```</span></span></code></pre></div>
<p>코드에 맞는 언어를 표시하여 언어별 코드 하이라이트를 적용할 수 있습니다.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1"><span class="in" style="color: #5E5E5E;">```python</span></span>
<span id="cb8-2"><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-3"><span class="in" style="color: #5E5E5E;">```</span></span></code></pre></div>
<p>Pandoc에서 지원하는 하이라이트 기능을 사용할 수 있습니다. <a href="https://github.com/jgm/skylighting/tree/master/skylighting-core/xml">140 언어 지원</a> 정보를 확인하세요. 만약 지원하는 언어가 없다면 <code>default</code>를 사용할 수 있습니다.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><span class="in" style="color: #5E5E5E;">```default</span></span>
<span id="cb9-2"><span class="in" style="color: #5E5E5E;">code</span></span>
<span id="cb9-3"><span class="in" style="color: #5E5E5E;">```</span></span></code></pre></div>
</section>
<section id="수식" class="level2">
<h2 class="anchored" data-anchor-id="수식">수식</h2>
<p><code>$</code> 구분기호를 이용하여 인라인 수식을 추가하고 <code>$$</code> 구분기호를 이용하여 수식만 표현할 수 있습니다.</p>
<table class="table">
<colgroup>
<col style="width: 38%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th>Markdown Syntax</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">인라인 수식: $E = mc^{2}$</span></code></pre></div></td>
<td>인라인 수식: <img src="https://latex.codecogs.com/png.latex?E=mc%5E%7B2%7D"></td>
</tr>
<tr class="even">
<td><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">수식 단독표현:</span>
<span id="cb11-2"></span>
<span id="cb11-3">$$E = mc^{2}$$</span></code></pre></div></td>
<td><p>수식 단독표현:</p>
<p><img src="https://latex.codecogs.com/png.latex?E%20=%20mc%5E%7B2%7D"></p></td>
</tr>
</tbody>
</table>
</section>
<section id="다이어그램" class="level2">
<h2 class="anchored" data-anchor-id="다이어그램">다이어그램</h2>
<p>Quarto는 <a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a>와 <a href="https://graphviz.org/">Graphviz</a> 다이어그램을 지원합니다. 플로우차트, 시퀀스 다이어그램, 스테이트 다이어그램, 간트차트등을 그릴 수 있습니다. Mermaid를 이용해서 플로우 차트를 생성합니다.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1"><span class="in" style="color: #5E5E5E;">```{mermaid}</span></span>
<span id="cb12-2">flowchart LR</span>
<span id="cb12-3">  A[입력] --&gt; B(전처리)</span>
<span id="cb12-4">  B --&gt; C{판단로직}</span>
<span id="cb12-5">  C --&gt; D[성공]</span>
<span id="cb12-6">  C --&gt; E[실패]</span>
<span id="cb12-7"><span class="in" style="color: #5E5E5E;">```</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<p>
</p><pre class="mermaid mermaid-js" data-tooltip-selector="#mermaid-tooltip-1">flowchart LR
  A[입력] --&gt; B(전처리)
  B --&gt; C{판단로직}
  C --&gt; D[성공]
  C --&gt; E[실패]
</pre>
<div id="mermaid-tooltip-1" class="mermaidTooltip">

</div>
<p></p>
</div>
</div>
</div>
</section>
<section id="동영상-연결" class="level2">
<h2 class="anchored" data-anchor-id="동영상-연결">동영상 연결</h2>
<p>문서 내부에 동영상을 연결할 수 있습니다. <code>{{&lt; video &gt;}}</code> 를 이용해서 유튜브 동영상은 연결할 수 있습니다.</p>
<div class="sourceCode" id="cb13" data-shortcodes="false" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">{{&lt; video https://www.youtube.com/embed/wo9vZccmqwc &gt;}}</span></code></pre></div>
<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/wo9vZccmqwc" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="html-코드-divs-spans" class="level2">
<h2 class="anchored" data-anchor-id="html-코드-divs-spans">HTML 코드 (Divs, Spans)</h2>
<p>HTML의 <code>div</code> 블럭을 만들 수 있습니다. <code>class</code> 정보를 <code>border</code>로 정의합니다.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">::: {#special .border}</span>
<span id="cb14-2">class를 "border"로 정의한 div block으로 변환됩니다.</span>
<span id="cb14-3">:::</span></code></pre></div>
<p>Quarto를 렌터링하고 나면 아래의 HTML 코드로 변경됩니다.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb15-1"><span class="kw" style="color: #003B4F;">&lt;div</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"special"</span> <span class="er" style="color: #AD0000;">class</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"border"</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb15-2">  <span class="kw" style="color: #003B4F;">&lt;p&gt;</span>class를 "border"로 정의한 div block으로 변환됩니다.<span class="kw" style="color: #003B4F;">&lt;/p&gt;</span></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;">&lt;/div&gt;</span></span></code></pre></div>
<p>대괄호 <code>[]</code>로 표현된 문자열은 <code>span</code>으로 변환됩니다.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">[</span><span class="ot" style="color: #003B4F;">테스트 *SPAN* 코드입니다.</span><span class="co" style="color: #5E5E5E;">]</span>{.class key="val"}</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb17-1"><span class="kw" style="color: #003B4F;">&lt;span</span> <span class="er" style="color: #AD0000;">class</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"class"</span> <span class="er" style="color: #AD0000;">data-key</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"val"</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb17-2">  테스트 <span class="kw" style="color: #003B4F;">&lt;em&gt;</span>SPAN<span class="kw" style="color: #003B4F;">&lt;/em&gt;</span> 코드입니다.</span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">&lt;/span&gt;</span></span></code></pre></div>
</section>
<section id="참고" class="level2">
<h2 class="anchored" data-anchor-id="참고">참고</h2>
<ol type="1">
<li>https://quarto.org/docs/authoring/markdown-basics.html</li>
</ol>


</section>
</section>

 ]]></description>
  <category>Quarto</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-12-markdown/index.html</guid>
  <pubDate>Mon, 11 Sep 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/12/200/150" medium="image"/>
</item>
<item>
  <title>Pandas 데이터프레임 머지</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/index.html</link>
  <description><![CDATA[ 



<section id="테이터프레임-머지하기" class="level1">
<h1>테이터프레임 머지하기</h1>
<p>병합은 서로다른 데이터프레임 객체에 동일하게 존재하는 값을 통해 양쪽 데이터를 연관 지어 하나의 데이터프레임으로 모델링할 수 있는 유용한 방법입니다. 연습을 위해서 데이터를 준비합니다.</p>
<p><code>Yahoo Finance</code>에서는 미국뿐 아니라 한국 주식에 대한 정보를 제공합니다. <code>KOSPI</code>주식 정보를 csv형태로 저장해서 데이터프레임 머지 연습에 사용할께요. <a href="https://finance.yahoo.com/quote/%5EKS11?p=%5EKS11&amp;.tsrc=fin-srch">Yahoo Finance</a>로 이동해서 <code>historica l data</code> 탭을 선택합니다.</p>
<p><img src="https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/images/paste-1.png" class="img-fluid"></p>
<p><code>Historical Data</code> 를 선택하면 위와 같이 <code>KOSPI</code> 에 대한 시계열 데이터를 얻을 수 있습니다. <code>download</code>를 눌러 다운로드하여 저장합니다. 혹은 [<a href="../../../../../../website/docs/blog/posts/2023/09/2023-09-11-pandas-merge/KS11.csv">KS11.csv</a>]에서 다운로드 하세요.</p>
<section id="데이터-로드하기" class="level2">
<h2 class="anchored" data-anchor-id="데이터-로드하기">데이터 로드하기</h2>
<p>csv파일을 불러와서 데이터프레임 형태를 확인합니다. 시계열데이터의 경우 날짜정보를 데이터프레임의 <code>index</code>로 사용하면 편리합니다. <code>data</code>컬럼을 index로 설정합니다.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2">kospi <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"./^KS11.csv"</span>, index_col <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Date'</span>)</span>
<span id="cb1-3">kospi.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-09-13</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>366900</td>
    </tr>
    <tr>
      <th>2022-09-14</th>
      <td>2390.469971</td>
      <td>2418.419922</td>
      <td>2381.500000</td>
      <td>2411.419922</td>
      <td>2411.419922</td>
      <td>461300</td>
    </tr>
    <tr>
      <th>2022-09-15</th>
      <td>2416.010010</td>
      <td>2421.629883</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>423900</td>
    </tr>
    <tr>
      <th>2022-09-16</th>
      <td>2387.560059</td>
      <td>2395.100098</td>
      <td>2371.110107</td>
      <td>2382.780029</td>
      <td>2382.780029</td>
      <td>440300</td>
    </tr>
    <tr>
      <th>2022-09-19</th>
      <td>2388.729980</td>
      <td>2389.850098</td>
      <td>2352.760010</td>
      <td>2355.659912</td>
      <td>2355.659912</td>
      <td>403700</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>날짜정보가 index로 설정된 데이터프레임을 생성했습니다. 이제 연결을 위한 새로운 데이터프레임을 생성합니다. 데이트 프레임을 연결할 정보를 <code>Ticker</code>라는 컬럼으로 설정하고 기존 데이터프레임의 <code>Volume</code>컬럼을 추가합니다.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">kospi_volume <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame ({<span class="st" style="color: #20794D;">'Ticker'</span>: <span class="st" style="color: #20794D;">'kospi'</span>, <span class="st" style="color: #20794D;">'Volume'</span> : kospi[<span class="st" style="color: #20794D;">'Volume'</span>]})</span>
<span id="cb2-2">kospi_volume.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Ticker</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-09-13</th>
      <td>kospi</td>
      <td>366900</td>
    </tr>
    <tr>
      <th>2022-09-14</th>
      <td>kospi</td>
      <td>461300</td>
    </tr>
    <tr>
      <th>2022-09-15</th>
      <td>kospi</td>
      <td>423900</td>
    </tr>
    <tr>
      <th>2022-09-16</th>
      <td>kospi</td>
      <td>440300</td>
    </tr>
    <tr>
      <th>2022-09-19</th>
      <td>kospi</td>
      <td>403700</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>2개의 데이터프레임이 함께 갖는 컬럼인 ’Ticker’를 통해서 병합을 진행하고 이를 통해서 <code>Volume</code>정보를 추가하려고 합니다. 올바르게 동작하는 지 확인하기 위해서 기존 데이터프레임의 <code>Volume</code> 컬럼을 삭제합니다.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">kospi[<span class="st" style="color: #20794D;">'Ticker'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'kospi'</span></span>
<span id="cb3-2">kospi.pop(<span class="st" style="color: #20794D;">'Volume'</span>)</span>
<span id="cb3-3">kospi.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Ticker</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2022-09-13</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-14</th>
      <td>2390.469971</td>
      <td>2418.419922</td>
      <td>2381.500000</td>
      <td>2411.419922</td>
      <td>2411.419922</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-15</th>
      <td>2416.010010</td>
      <td>2421.629883</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>2401.830078</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-16</th>
      <td>2387.560059</td>
      <td>2395.100098</td>
      <td>2371.110107</td>
      <td>2382.780029</td>
      <td>2382.780029</td>
      <td>kospi</td>
    </tr>
    <tr>
      <th>2022-09-19</th>
      <td>2388.729980</td>
      <td>2389.850098</td>
      <td>2352.760010</td>
      <td>2355.659912</td>
      <td>2355.659912</td>
      <td>kospi</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><code>Volume</code>컬럼이 삭제되었으니 병합을 진행합니다. <code>pd.merge()</code>함수를 사용하고 공통 컬럼인 <code>Ticker</code>컬럼을 전달합니다.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">merged_df <span class="op" style="color: #5E5E5E;">=</span> pd.merge(kospi, kospi_volume, on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Ticker'</span>)</span>
<span id="cb4-2">merged_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Ticker</th>
      <th>Volume</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>366900</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>461300</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>423900</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>440300</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2418.590088</td>
      <td>2453.949951</td>
      <td>2418.590088</td>
      <td>2449.540039</td>
      <td>2449.540039</td>
      <td>kospi</td>
      <td>403700</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>이제 새로운 <code>merged_df</code> 데이터프레임은 2개의 데이터프레임을 연결하여 <code>Volume</code>정보를 추가 하였습니다.</p>


</section>
</section>

 ]]></description>
  <category>Pandas</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-merge/index.html</guid>
  <pubDate>Sun, 10 Sep 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/111/200/150" medium="image"/>
</item>
<item>
  <title>Quarto Callout Block</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-10-quarto-callout/index.html</link>
  <description><![CDATA[ 



<p>Quarto를 이용해 문서를 작성하는 과정에서 강조할 내용이 있는 경우 <code>Callout Block</code>을 사용하는 것이 좋습니다. 자산이 작성한 글에 집중이 필요한 내용을 명확하게 나타낼 수 있습니다. 공부한 내용을 정리합니다.</p>
<section id="callout-종류" class="level2">
<h2 class="anchored" data-anchor-id="callout-종류">Callout 종류</h2>
<p><code>Callout Block</code>은 총 아래의 <code>note</code>, <code>warning</code>, <code>important</code>, <code>tip</code>, <code>caution</code> 5가지 종류를 갖습니다. 실제 어떻게 적용되는지 아래에서 살펴보세요.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>note</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>warning</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>important</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>tip</code> 타입을 사용합니다.</p>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Danger
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>caution</code> 타입을 사용합니다.</p>
</div>
</div>
<p>Markdown으로 어떻게 구현하는 지 확인해봅시다. <code>:::</code> 키워드를 사용했고 <code>Callout Block</code>형식은 <code>{}</code>로 표시합니다.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">::: {.callout-caution}</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;"># 제목을 추가합니다.</span></span>
<span id="cb1-3">Callout <span class="in" style="color: #5E5E5E;">`caution`</span> 타입을 사용합니다.</span>
<span id="cb1-4">:::</span></code></pre></div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
제목을 추가합니다.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>caution</code> 타입을 사용합니다.</p>
</div>
</div>
</section>
<section id="다양한-사용자-설정" class="level2">
<h2 class="anchored" data-anchor-id="다양한-사용자-설정">다양한 사용자 설정</h2>
<section id="제목-추가하기" class="level3">
<h3 class="anchored" data-anchor-id="제목-추가하기">제목 추가하기</h3>
<p>아이콘은 유지하고 제목을 변경하고 싶은 경우가 있습니다. 이 경우 <code>header</code> 마크다운을 사용합니다.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">::: {.callout-caution}</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;"># 제목을 추가합니다.</span></span>
<span id="cb2-3">Callout <span class="in" style="color: #5E5E5E;">`caution`</span> 타입을 사용합니다.</span>
<span id="cb2-4">:::</span></code></pre></div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
제목을 추가합니다.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Callout <code>caution</code> 타입을 사용합니다.</p>
</div>
</div>
</section>
<section id="형태-변경하기" class="level3">
<h3 class="anchored" data-anchor-id="형태-변경하기">형태 변경하기</h3>
<p><code>Callout Block</code>의 외형은 <code>default</code>, <code>simple</code>, <code>minimam</code> 형태를 지원합니다. 각각이 어떻게 표현되는지 알아봅니다.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Default 외형
</div>
</div>
<div class="callout-body-container callout-body">
<p>default 외형을 확인합니다.</p>
</div>
</div>
<div class="callout-note callout callout-style-simple callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
simple 외형
</div>
</div>
<div class="callout-body-container callout-body">
<p>simple 외형을 확인합니다.</p>
</div>
</div>
<div class="callout-note callout callout-style-simple no-icon callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
minimal 외형
</div>
</div>
<div class="callout-body-container callout-body">
<p>minimal 외형을 확인합니다.</p>
</div>
</div>
<p>코드는 아래와 같이 사용합니다. <code>appearance</code>가 추가되었습니다.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">::: {.callout-note appearance="minimal"}</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;"># Default 외형</span></span>
<span id="cb3-3">default 외형을 확인합니다.</span>
<span id="cb3-4">:::</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>Quarto</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-10-quarto-callout/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/10/200/150" medium="image"/>
</item>
<item>
  <title>Pandas 데이터 전처리</title>
  <dc:creator>양성모</dc:creator>
  <link>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-datatype-transform/index.html</link>
  <description><![CDATA[ 



<section id="테이터-전처리" class="level1">
<h1>테이터 전처리</h1>
<p>데이터시각화 및 데이터분석을 위해 읽어온 원본 데이터의 데이터 타입이 올바른지 확인하지 않으면 분석과정에 사용하는 다양한 통계적 지표나 필터결과가 오류를 발생합니다. 데이터에 맞는 형식으로 변경되지 않은 데이터프레임을 사용할 때 발생하는 문제점을 확인하고 올바르게 데이터 형식으로 변경하는 과정을 정리합니다.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> datetime <span class="im" style="color: #00769E;">as</span> dt</span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">"year"</span>: [<span class="st" style="color: #20794D;">'1900'</span>,<span class="st" style="color: #20794D;">'1901'</span>,<span class="st" style="color: #20794D;">'1910'</span>,<span class="st" style="color: #20794D;">'2021'</span>, <span class="st" style="color: #20794D;">'2023'</span>],</span>
<span id="cb1-5">                   <span class="st" style="color: #20794D;">"n_sales"</span> : [<span class="st" style="color: #20794D;">'10EA'</span>, <span class="st" style="color: #20794D;">'20EA'</span>, <span class="st" style="color: #20794D;">'40EA'</span>, <span class="st" style="color: #20794D;">'100EA'</span>, <span class="st" style="color: #20794D;">'210EA'</span>],</span>
<span id="cb1-6">                   <span class="st" style="color: #20794D;">"status"</span> : [<span class="st" style="color: #20794D;">'good'</span>, <span class="st" style="color: #20794D;">'bad'</span>, <span class="st" style="color: #20794D;">'normal'</span>, <span class="st" style="color: #20794D;">'bad'</span>, <span class="st" style="color: #20794D;">'good'</span>]})</span>
<span id="cb1-7">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>year</th>
      <th>n_sales</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1900</td>
      <td>10EA</td>
      <td>good</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1901</td>
      <td>20EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1910</td>
      <td>40EA</td>
      <td>normal</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2021</td>
      <td>100EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023</td>
      <td>210EA</td>
      <td>good</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>데이터 프레임은 <code>year</code>, <code>n_sales</code>, <code>status</code> 3개의 컬럼을 갖습니다. 각 컬럼이 어떤 데이터 타입인지 확인해볼까요? 데이터프레임의 정보를 보여주는 <code>info()</code>함수로 데이터 타입을 확인합니다.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
 #   Column   Non-Null Count  Dtype 
---  ------   --------------  ----- 
 0   year     5 non-null      object
 1   n_sales  5 non-null      object
 2   status   5 non-null      object
dtypes: object(3)
memory usage: 248.0+ bytes</code></pre>
</div>
</div>
<p>예상했던 데이터 형식과 다릅니다. <code>n_sales</code>는 숫자를 표현하고 있기 때문에 <code>int</code> 타입으로 표현되어야 할 것 같은데 <code>object</code>타입이네요. 데이터 프레임의 통계정보를 보여주는 <code>describe()</code>함수를 사용하면 차이를 알 수 있습니다.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df[<span class="st" style="color: #20794D;">'n_sales'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>count        5
unique       5
top       10EA
freq         1
Name: n_sales, dtype: object</code></pre>
</div>
</div>
<p>위의 코드 실행결과에서 확인할 수 있는 것처럼 <code>n_sales</code>컬럼의 통계 정보는 <code>categorical</code> 통계정보가 출력됩니다. 숫자로 표현되지 않아서 예상했던 <code>평균</code>, <code>표준편차</code> 등의 정보는 알 수 없습니다.</p>
<section id="데이터-타입-변경하기" class="level2">
<h2 class="anchored" data-anchor-id="데이터-타입-변경하기">데이터 타입 변경하기</h2>
<p>데이터에 대한 적절한 전처리가 되지 않는 경우 잘못된 통계정보를 이용할 수 있기 때문에 적절한 전처리가 필요합니다. 위에서 만든 데이터프레임의 각 컬럼에 올바른 데이터타입을 적용해야 합니다.</p>
<div class="cell" data-execution_count="4">
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>year</th>
      <th>n_sales</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1900</td>
      <td>10EA</td>
      <td>good</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1901</td>
      <td>20EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1910</td>
      <td>40EA</td>
      <td>normal</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2021</td>
      <td>100EA</td>
      <td>bad</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023</td>
      <td>210EA</td>
      <td>good</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>일반적으로 데이터 타입 변경은 데이터에 대한 이해가 필요합니다. <code>year</code>의 경우 날짜를 표현하고 있고 <code>n_sales</code>의 <code>EA</code>는 단위이기 때문에 꼭 필요한 정보가 아니라면 삭제 가능합니다. 이 두 가지 데이터 컬럼은 숫자를 표현하고 있으니 <code>int</code> 타입으로 변경합니다. 마지막 <code>status</code> 컬럼은 명백히 <code>categorical</code> 데이터입니다.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df[<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;">'year'</span>])</span>
<span id="cb6-2">df[<span class="st" style="color: #20794D;">'n_sales'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'n_sales'</span>].<span class="bu" style="color: null;">str</span>.strip(<span class="st" style="color: #20794D;">'EA'</span>).astype(<span class="st" style="color: #20794D;">'int'</span>)</span>
<span id="cb6-3">df[<span class="st" style="color: #20794D;">'status'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'status'</span>].astype(<span class="st" style="color: #20794D;">'category'</span>)</span></code></pre></div>
</div>
<p>위의 <code>to_datatime()</code>과 <code>astype()</code>함수를 이용해서 각 컬럼을 ‘datetime’, ‘int’, ‘categorical’ 타입으로 변경했습니다. 단위를 제거하기 위해서 ‘strip()’ 함수를 사용한 것을 참고하세요.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
 #   Column   Non-Null Count  Dtype         
---  ------   --------------  -----         
 0   year     5 non-null      datetime64[ns]
 1   n_sales  5 non-null      int64         
 2   status   5 non-null      category      
dtypes: category(1), datetime64[ns](1), int64(1)
memory usage: 345.0 bytes</code></pre>
</div>
</div>
<p>수정된 데이터 프레임은 올바른 데이터 타입을 갖습니다. 이제 데이터프레임의 통계정보를 확인하겠습니다.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df[<span class="st" style="color: #20794D;">'n_sales'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>count      5.000000
mean      76.000000
std       82.643814
min       10.000000
25%       20.000000
50%       40.000000
75%      100.000000
max      210.000000
Name: n_sales, dtype: float64</code></pre>
</div>
</div>
<p>이제 예상한 것과 같이 <code>n_sales</code>에 대한 <code>평균</code>, <code>표준편차</code> 등의 통계정보를 확인할 수 있습니다.</p>


</section>
</section>

 ]]></description>
  <category>Pandas</category>
  <guid>https://gabrielwithappy.github.io/docs/blog/posts/2023/09/2023-09-11-pandas-datatype-transform/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/110/200/150" medium="image"/>
</item>
</channel>
</rss>
