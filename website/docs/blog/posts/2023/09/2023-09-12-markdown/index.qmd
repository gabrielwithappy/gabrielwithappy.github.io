---
title: Markdown문법 정리하기
subtitle: Markdown문법 정리하기
description:
  Markdown문법을 정리합니다.
categories:
  - Pandas
author: 양성모
date: "09/12/2023"
image: "https://picsum.photos/id/12/200/150"
# image-alt: "deep learning glossary"
page-layout: article
---
[작성중]

# Markdown

마크다운은 텍스트를 이용해 문서를 작성하는 도구입니다. 일반 텍스트를 이용해서 Table, 링크 등 다양한 문서형태를 작성할 수 있습니다. Quart는 Pandoc을 기반으로 하고 있으며 Markdown으로 문서를 작성합니다. 자주 사용하는 Markdown 문법을 정리합니다.

## Text Formatting

텍스트의 형태를 변경하는 다양한 문법을 확인합니다.

+-----------------------------------------+-----------------------------------------+
| Markdown Syntax                         | Output                                  |
+=========================================+=========================================+
| ``` markdown                            | *italics*, **bold**, ***bold italics*** |
| *italics*, **bold**, ***bold italics*** |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | superscript^2^ / subscript~2~           |
| superscript^2^ / subscript~2~           |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | ~~strikethrough~~                       |
| ~~strikethrough~~                       |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+


## Link 및 이미지 연결

링크에 보일 글자와 함께 링크정보를 표시합니다.

``` markdown
<https://quarto.org>
```
<https://quarto.org>





## Table

``` markdown
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
```

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |


## Source Code

Use ```` ``` ```` to delimit blocks of source code:

```` markdown
```
code
```
````

Add a language to syntax highlight code blocks:

```` markdown
```python
1 + 1
```
````

Pandoc supports syntax highlighting for over [140 different languages](https://github.com/jgm/skylighting/tree/master/skylighting-core/xml). If your language is not supported then you can use the `default` language to get a similar visual treatment:

```` markdown
```default
code
```
````

If you are creating HTML output there is a wide variety of options available for code block output. See the article on [HTML Code](../output-formats/html-code.qmd) for additional details.

## Equations

Use `$` delimiters for inline math and `$$` delimiters for display math. For example:

+---------------------------+-------------------------+
| Markdown Syntax           | Output                  |
+===========================+=========================+
| ``` markdown              |                         |
| inline math: $E = mc^{2}$ | inline math: $E=mc^{2}$ |
| ```                       |                         |
+---------------------------+-------------------------+
| ``` markdown              |                         |
| display math:             | display math:           |
|                           |                         |
| $$E = mc^{2}$$            | $$E = mc^{2}$$          |
| ```                       |                         |
+---------------------------+-------------------------+

If you want to define custom TeX macros, include them within `$$` delimiters enclosed in a `.hidden` block. For example:

``` tex
::: {.hidden}
$$
 \def\RR{{\bf R}}
 \def\bold#1{{\bf #1}}
$$
:::
```

For HTML math processed using [MathJax](https://docs.mathjax.org/) (the default) you can use the `\def`, `\newcommand`, `\renewcommand`, `\newenvironment`, `\renewenvironment`, and `\let` commands to create your own macros and environments.

## Diagrams

Quarto has native support for embedding [Mermaid](https://mermaid-js.github.io/mermaid/#/) and [Graphviz](https://graphviz.org/) diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, Gantt charts, and more using a plain text syntax inspired by markdown.

For example, here we embed a flowchart created using Mermaid:

```{mermaid}
%%| echo: fenced
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

Learn more in the article on [Diagrams](diagrams.qmd).

## Videos

You can include videos in documents using the `{{{< video >}}}` shortcode. For example, here we embed a YouTube video:

``` {.markdown shortcodes="false"}
{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}
```

Videos can refer to video files (e.g. MPEG) or can be links to videos published on YouTube, Vimeo, or Brightcove. Learn more in the article on [Videos](videos.qmd).


## Divs and Spans

You can add classes, attributes, and other identifiers to regions of content using Divs and Spans (you'll see an example of this below in [Callout Blocks]).

For example, here we add the "border" class to a region of content using a div (`:::`):

``` markdown
::: {.border}
This content can be styled with a border
:::
```

Once rendered to HTML, Quarto will translate the markdown into:

``` html
<div class="border">
  <p>This content can be styled with a border</p>
</div>
```

Divs start with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The Div ends with another line containing a string of at least three consecutive colons. The Div should be separated by blank lines from preceding and following blocks. Divs may also be nested. For example

``` markdown
::::: {#special .sidebar}

::: {.warning}
Here is a warning.
:::

More content.
:::::
```

Once rendered to HTML, Quarto will translate the markdown into:

``` html
<div id="special" class="sidebar">
  <div class="warning">
    <p>Here is a warning.</p>
  </div>
  <p>More content.</p>
</div>
```

Fences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents.

A bracketed sequence of inlines, as one would use to begin a link, will be treated as a `Span` with attributes if it is followed immediately by attributes:

``` markdown
[This is *some text*]{.class key="val"}
```

Once rendered to HTML, Quarto will translate the markdown into:

``` html
<span class="class" data-key="val">
  This is <em>some text</em>
</span>
```


### Ordering of Attributes

Both divs and spans in Pandoc can have any combination of identifiers, classes, and (potentially many) key-value attributes. In order for these to be recognized by Pandoc, they have to be provided in a specific order: identifiers, classes, and then key-value attributes. Any of these can be omitted, but must follow that order if they are provided. For example, the following is valid:

``` markdown
[This is good]{#id .class key1="val1" key2="val2"}
```

However, the following *will not be recognized by Pandoc*:

``` markdown
[This does *not* work!]{.class key="val" #id}
```

This ordering restriction applies to both divs and spans. See Pandoc's documentation on [Divs and Spans](https://pandoc.org/MANUAL.html#divs-and-spans) for additional details.

## Callout Blocks

#### Markdown Syntax

``` markdown
:::{.callout-note}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::
```

#### Output

::: callout-note
Note that there are five types of callouts, including `note`, `tip`, `warning`, `caution`, and `important`.
:::


## Other Blocks

+--------------------------+--------------------------+
| Markdown Syntax          | Output                   |
+==========================+==========================+
| ``` markdown             | > Blockquote             |
| > Blockquote             |                          |
| ```                      |                          |
+--------------------------+--------------------------+
| ``` markdown             | ::: classname            |
| ::: {.classname}         | Div                      |
| Div                      | :::                      |
| :::                      |                          |
| ```                      |                          |
+--------------------------+--------------------------+
| ``` markdown             | | Line Block             |
| | Line Block             | |    Spaces and newlines |
| |   Spaces and newlines  | |    are preserved       |
| |   are preserved        |                          |
| ```                      |                          |
+--------------------------+--------------------------+

## Special Characters

+-----------------+---------------+
| Markdown Syntax | Output        |
+=================+===============+
| ``` markdown    | endash: --    |
| endash: --      |               |
| ```             |               |
+-----------------+---------------+
| ``` markdown    | emdash: ---   |
| emdash: ---     |               |
| ```             |               |
+-----------------+---------------+

## 참고
1. https://quarto.org/docs/authoring/markdown-basics.html