---
title: Pandas 모든 컬럼이 NaN일 때만 삭제하기
subtitle: Pandas 모든 컬럼이 NaN일 때만 삭제하기
description:
  Pandas 모든 컬럼이 NaN일 때만 삭제하기
categories:
  - Pandas
author: gabriel yang
date: "09/14/2023"
image: "https://picsum.photos/id/141/200/150"
# image-alt: "deep learning glossary"
page-layout: article
freeze: true
---

# 모든 컬럼이 NaN일 때만 삭제하기

pandas에서는 NaN의 값을 갖는 데이터를 누락된 데이터라고 합니다. NaN값은 해당 인덱스 레이블에 값이 없음을 의미합니다. 아래와 같이 NaN값을 가지는 데이터프레임을 생성하고 NaN으로 처리된 없는 값을 채우는 방법을 확인 해봅니다.

## 테스트 데이터 생성하기

테스트를 위해서 데이터를 생성합니다.
``` {python}
import pandas as pd
import numpy as np

df = pd.DataFrame(
  np.arange(0, 30).reshape(10,3),
  columns=['a','b','c'])
df
```

`numpy`라이브러리로 0 부터 29까지 숫자를 생성하고 `reshape()`함수로 차원을 10, 3으로 변경합니다. 10개의 열과 3개의 컬럼을 갖는 형태로 변경되었습니다. 데이터프레임의 컬럼은 `a, b, c`로 리스트를 전달했습니다.

``` {python}
df.loc[[0,7]] = np.NaN
df
```

데이터프레임에 `NaN`을 추가하기 위해서 `np.NaN`을 사용했습니다. 위치는 0, 7번째 열에 추가하기 위해 `df.log[[0, 7]] = np.NaN`을 사용합니다.

``` {python}
df[(df > 10) & (df < 13)] = np.NaN
df
```

전체 컬럼이 `NaN`일 때만 삭제되는 지 확인하기 위해서 일부 컬럼에만 `NaN`이 있는 경우도 만들겠습니다. `df[(df > 10) & (df < 13)] = np.NaN`는 데이터프레임의 값이 10보다 크고 13보다 작은 위치에 `NaN`이 추가되었습니다.

``` {python}
df.loc[9, 'b'] = np.NAN
df
```

이제 컬럼정보와 index정보를 모두 이용해서 데이터를 수정합니다. 데이터프레임의 `index`가 `9`이고 컬럼이 `b`인 위치에 `NaN`을 추가합니다.

## NaN값 찾기

데이터가 없는 NaN를 찾기 위해서는 isnull()을 사용합니다. isnull()을 사용하면 데이터프레임에서NaN으로 표시된 위치를 True로 표시한 데이터프레임을 반환합니다.

``` {python}
df.isnull()
```

데이터프레임 중 `NaN`으로 표시된 부분이 `True`로 설정되었습니다.

## 결측 데이터 삭제

데이터 프레임에 .dropna()가 사용되면 NaN값이 하나 이상 있는 모은 로우가 삭제됩니다.

``` {python}
df.dropna()
```

`NaN`을 포함하는 0, 3, 4, 7, 9 열이 삭제되었습니다. 모든값이 NaN인 로우만 삭제하고 싶을 경우에는 how='all' 파라메터를 사용합니다.

``` {python}
df.dropna(how = 'all')
```

이번에는 모든 열이 `NaN`정보를 갖는 7번 열이 삭제되었습니다. 이제 컬럼 방향으로 모두 `NaN`인 경우를 알아봅니다. 컬럼이 모두 `NaN`이라면 해당 컬럼에 해당하는 정보를 사용할 수 없으니 삭제하는 것이 좋습니다.

하지만 사용하고 있던 데이터가 공통으로 사용하는 원본 데이터프레임이라면 모두 `NaN`인 컬럼을 제외하여 새로운 데이터프레임을 생성하는 것이 더 좋을 수 있습니다.

테스트를 위한 데이터프레임을 만들 때 컬럼이 모두 `NaN`인 경우는 없었습니다. 테스트를 위해 모든 컬럼값이 `NaN`인 경우를 만들어봅니다.

``` {python}
df['d'] = np.NaN
df
```

데이터프레임에 모든 값이 `NaN`인 `d` 컬럼을 추가했습니다. 이제 컬럼방향으로 모두 `NaN`값을 가진 컬럼만 삭제합니다.

``` {python}
df.dropna(how='all', axis=1)
```

`axis`를 `1`로 사용했습니다. 숫자는 데이터프레임의 shape의 순서 인덱스며 `1`은 컬럼 방향을 의미합니다.

``` {python}
df.shape
```

테스트에 사용한 데이터프레임의 `shape`를 확인하면 첫번째 정보는 열, 두 번째 정보는 컬럼의 크기를 의미합니다. 위의 코드에서 사용한 `axis`는 shape의 2번째 인덱스 방향인 컬럼방향을 의미합니다.

## 참조
1. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html