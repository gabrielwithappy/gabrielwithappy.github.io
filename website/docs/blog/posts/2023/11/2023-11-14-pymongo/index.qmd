---
title: Pymongo 명령어 정리하기
subtitle: Pymongo 명령어 정리하기
description:
   Pymongo 명령어 정리하기
categories:
  - Database
author: gabriel yang
date: "11/14/2023"
image: "https://picsum.photos/id/114/200/150"
# image-alt: "deep learning glossary"
page-layout: article
# draft: true
---

# Pymongo 설치하기

Pymongo를 사용하기위해서 mongo DB를 설치해야합니다. docker를 이용해서 mongo DB를 설치합니다.

``` bash
# mongo image 다운로드
docker pull mongo

# 다운로드한 docker image 확인
docker images
REPOSITORY    TAG       IMAGE ID       CREATED        SIZE
mongo         latest    ee3b4d1239f1   4 weeks ago    748MB
hello-world   latest    9c7a54a9a43c   6 months ago   13.3kB
```

도커 이미지가 다운로드 완료되면 `docker images`명령으로 `mongo`이미지가 다운로드 된 것을 확인할 수 있습니다. VSCODE에서 docker extension을 설치하면 container를 쉽게 실행할 수 있습니다.

``` bash
# --name : 컨테이너에 이름 부여
# -p : 호스트와 컨테이너 간의 포터의 배포/바인드를 위해 사용
# -e : 컨테이너의 환경변수 설정
# ex) docker run -e FOO=bar python
# -v : 호스트와 컨테이너 간의 볼륨 설정을 위해 사용
# -w : 도커의 작업 디렉토리를 변경
# ex) docker run -w /etc python (컨테이너의 작업 디렉토리를 /etc로 변경)
# -d : 도커를 백그라운드에서 사용하는 경우
docker run -p 27017:27017 --name mongodb -v .:/data/db -d mongo
```
이제 백그라운드로 실해되고 있는 mongodb container에 접속합니다.

``` bash
docker exec -it mongodb bash
```

## MongoDB 서버에 연결

DB에 연결할 수 있는 clinet를 생성합니다.
``` {python}
import pymongo
client = pymongo.MongoClient(host="localhost", port=27017)
```



## 데이터베이스 선택

MongoClient를 생성하고 데이터베이스 정보를 `list_databases`로 확인합니다. 기본적으로 생성된 데이터베이스를 확인할 수 있습니다.

``` python
for item in client.list_databases():
  print(item)
```
```
{'name': 'admin', 'sizeOnDisk': 40960, 'empty': False}
{'name': 'config', 'sizeOnDisk': 110592, 'empty': False}
{'name': 'local', 'sizeOnDisk': 40960, 'empty': False}
```

## 데이터 베이스 생성

새로운 데이터베이스는 client의 key로 생성할 수 있습니다. 새롭게 `testdb`를 생성했지만 db에 데이터가 없는 경우 db가 표시되지 않습니다. `testdb`가 표시되지 않습니다.

``` python
db = client['testdb']
for item in client.list_databases():
  print(item)
```
```
{'name': 'admin', 'sizeOnDisk': 40960, 'empty': False}
{'name': 'config', 'sizeOnDisk': 110592, 'empty': False}
{'name': 'local', 'sizeOnDisk': 40960, 'empty': False}
```

## document 생성

새롭게 생성한 데이터베이스에 collection을 생성하고 document를 추가합니다. document가 추가되면 데이터베이스가 표시됩니다. document가 추가된 후 다시 데이터베이스를 확인하면

``` python
collection = db['test_collection']
document = {"name": "tony", "age": 20}
result = collection.insert_one(document)

for item in client.list_databases():
  print(item)
```
```
{'name': 'admin', 'sizeOnDisk': 40960, 'empty': False}
{'name': 'config', 'sizeOnDisk': 110592, 'empty': False}
{'name': 'local', 'sizeOnDisk': 40960, 'empty': False}
{'name': 'testdb', 'sizeOnDisk': 40960, 'empty': False}
```

document가 추가되었으니 데이터베이스를 다시 확인합니다. 새롭게 생성된 `testdb`를 확인할 수 있습니다.

## collection 확인하기

db에 생성된 collection을 확인하는 방법을 정리합니다. `testdb`에 생성된 collection 정보를 확인합니다.

``` python
db = client['testdb']
collection_names = db.list_collection_names()
for name in collection_names:
    print(name)
```
```
test_collection
````

## document 확인하기

PyMongo를 사용하여 MongoDB에서 문서(document)를 확인하는 방법은 find() 메서드를 사용하는 것입니다. 아래는 예시 코드입니다

``` python
db = client['testdb']
collection = db['test_collection']
documents = collection.find()

for document in documents:
  print(document)
```
```
{'_id': ObjectId('655642e7f23cab961d457750'), 'name': 'tony', 'age': 20}
```

특정 조건을 만족하는 document만 확인하는 방법은 query정보를 딕셔너리 형태로 전달합니다. 검색조건 확인을 위해서 document를 조금 더 추가합니다. 3개의 document가 생성됩니다.

``` python
document = {"name": "mike", "age": 30}
collection.insert_one(document)

document = {"name": "mike", "age": 30}
collection.insert_one(document)

document = {"name": "bill", "age": 51}
collection.insert_one(document)

documents = collection.find()
for document in documents:
  print(document)
```
```
{'_id': ObjectId('65564377f23cab961d457758'), 'name': 'tony', 'age': 20}
{'_id': ObjectId('65564a0af1cdcfb1f527fe57'), 'name': 'mike', 'age': 30}
{'_id': ObjectId('65564a0af1cdcfb1f527fe58'), 'name': 'mike', 'age': 30}
{'_id': ObjectId('65564a0af1cdcfb1f527fe59'), 'name': 'bill', 'age': 51}
```

collection에서 검색하는 document중 하나만 선택 시 `find_one`을 사용합니다.

``` python
document = collection.find_one({"name":"mike"})
print(document)
print("")
```
```
{'_id': ObjectId('6556482cf1cdcfb1f527fe55'), 'name': 'mike', 'age': 30}
```