{
  "hash": "c445f6495a1f62f46c2ed75a17bb6b34",
  "result": {
    "markdown": "---\ntitle: Pandas 중복 데이터 제거하기\nsubtitle: Pandas 중복 데이터 제거하기\ndescription:\n  Pandas 중복 데이터 제거하기\ncategories:\n  - Pandas\nauthor: gabriel yang\ndate: \"09/14/2023\"\nimage: \"https://picsum.photos/id/14/200/150\"\n# image-alt: \"deep learning glossary\"\npage-layout: article\n---\n\n# Pandas 중복 데이터 제거하기\n\n데이터프레임에는 중복 데이터가 존재할 수 있습니다. 중복 데이터가 계산 결과에 영향을 주는 의도된 데이터가 아니라면 중복 데이터를 적절하게 처리하는 것이 필요할 수 있습니다. 현업에서 진행하게 된다면 이 과정은 데이터에 대해서 이해한 업무 담당자와 확인이 필요합니다. 중복데이터 연습을 위해서 데이터프레임을 생성합니다.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf_duplicated = pd.DataFrame({'city': ['seoul']*3 + ['busan']*2,\n                              'num' : ['02'] *3 + ['051']*2})\ndf_duplicated\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n도시 이름에 맞는 지역번호를 정보로 저장하는 데이터프레임으로 생성합니다. city 컬럼 정보를 이용하여 지역번호를 확인하기 위해 데이터프레임을 사용한다면 city정보가 중복될 필요가 없습니다. 중복되는 데이터를 정리할 수 있습니다. 중복된 열정보는 `duplicated()`함수를 이용하여 확인합니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf_duplicated.duplicated()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0    False\n1     True\n2     True\n3    False\n4     True\ndtype: bool\n```\n:::\n:::\n\n\n중복된 열정보를 갖는 `boolean` Series가 리턴되었습니다. 이 정보를 이용해서 중복된 열을 제거합니다. 중복된 열은 `drop_duplicates()`함수를 사용합니다. 함수의 \\[[API정보](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html)\\]를 확인하면 `keep` 파라메터를 이용해서 어떤 위치의 중복열을 `True`로 표시할지 결정합니다.\n\n![](images/paste-1.png)\n\n마지막 중복열을 제외한 모든 열을 `True`로 정의하기 위해서 `keep` 파라메터를 `last`로 전달합니다. 기본은 `first`값을 갖는군요.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf_duplicated.drop_duplicates(keep='last')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n중복된 열의 마지막 열만 남고 중복된 열이 삭제되었습니다. 아직 `df_duplicated` 데이터프레임의 정보는 변경되지 않았다는 것을 주의해야합니다.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf_duplicated\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n데이터프레임을 변경하는 경우 변수에 결과값을 다시 전달하거나 함수가 `inplace`파라메터를 지원해서 데이터프레임을 바로 수정할 수 있는 지 확인해야 합니다.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf = df_duplicated.drop_duplicates(keep='last')\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>seoul</td>\n      <td>02</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n이제 중복을 제거한 데이터프레임의 `city`컬럼의 정보가 `busan`인 열을 선택합니다. 선택을 위해서 `df`에 `boolean indexing`결과를 전달합니다.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf[df['city'] == 'busan']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>num</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>busan</td>\n      <td>051</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 참조\n1. https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}