{
  "hash": "aecaa20eb85549d1814f7e2cb5a37037",
  "result": {
    "markdown": "---\ntitle: Pandas 데이터 전처리\nsubtitle: Pandas 데이터 타입 변경 전처리\ndescription:\n  Pandas 데이터 타입을 변경하는 방법, 데이터 전처리 방법을 정리합니다.\ncategories:\n  - Pandas\nauthor: gabriel yang\ndate: \"09/10/2023\"\nimage: \"https://picsum.photos/id/110/200/150\"\n# image-alt: \"deep learning glossary\"\npage-layout: article\n---\n\n# 테이터 전처리\n\n데이터시각화 및 데이터분석을 위해 읽어온 원본 데이터의 데이터 타입이 올바른지 확인하지 않으면 분석과정에 사용하는 다양한 통계적 지표나 필터결과가 오류를 발생합니다. 데이터에 맞는 형식으로 변경되지 않은 데이터프레임을 사용할 때 발생하는 문제점을 확인하고 올바르게 데이터 형식으로 변경하는 과정을 정리합니다.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport datetime as dt\n\ndf = pd.DataFrame({\"year\": ['1900','1901','1910','2021', '2023'],\n                   \"n_sales\" : ['10EA', '20EA', '40EA', '100EA', '210EA'],\n                   \"status\" : ['good', 'bad', 'normal', 'bad', 'good']})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>n_sales</th>\n      <th>status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1900</td>\n      <td>10EA</td>\n      <td>good</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1901</td>\n      <td>20EA</td>\n      <td>bad</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1910</td>\n      <td>40EA</td>\n      <td>normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021</td>\n      <td>100EA</td>\n      <td>bad</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023</td>\n      <td>210EA</td>\n      <td>good</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n데이터 프레임은 `year`, `n_sales`, `status` 3개의 컬럼을 갖습니다. 각 컬럼이 어떤 데이터 타입인지 확인해볼까요? 데이터프레임의 정보를 보여주는 `info()`함수로 데이터 타입을 확인합니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype \n---  ------   --------------  ----- \n 0   year     5 non-null      object\n 1   n_sales  5 non-null      object\n 2   status   5 non-null      object\ndtypes: object(3)\nmemory usage: 248.0+ bytes\n```\n:::\n:::\n\n\n예상했던 데이터 형식과 다릅니다. `n_sales`는 숫자를 표현하고 있기 때문에 `int` 타입으로 표현되어야 할 것 같은데 `object`타입이네요. 데이터 프레임의 통계정보를 보여주는 `describe()`함수를 사용하면 차이를 알 수 있습니다.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf['n_sales'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ncount        5\nunique       5\ntop       10EA\nfreq         1\nName: n_sales, dtype: object\n```\n:::\n:::\n\n\n위의 코드 실행결과에서 확인할 수 있는 것처럼 `n_sales`컬럼의 통계 정보는 `categorical` 통계정보가 출력됩니다. 숫자로 표현되지 않아서 예상했던 `평균`, `표준편차` 등의 정보는 알 수 없습니다.\n\n## 데이터 타입 변경하기\n\n데이터에 대한 적절한 전처리가 되지 않는 경우 잘못된 통계정보를 이용할 수 있기 때문에 적절한 전처리가 필요합니다. 위에서 만든 데이터프레임의 각 컬럼에 올바른 데이터타입을 적용해야 합니다.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>n_sales</th>\n      <th>status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1900</td>\n      <td>10EA</td>\n      <td>good</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1901</td>\n      <td>20EA</td>\n      <td>bad</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1910</td>\n      <td>40EA</td>\n      <td>normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021</td>\n      <td>100EA</td>\n      <td>bad</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023</td>\n      <td>210EA</td>\n      <td>good</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n일반적으로 데이터 타입 변경은 데이터에 대한 이해가 필요합니다. `year`의 경우 날짜를 표현하고 있고 `n_sales`의 `EA`는 단위이기 때문에 꼭 필요한 정보가 아니라면 삭제 가능합니다. 이 두 가지 데이터 컬럼은 숫자를 표현하고 있으니 `int` 타입으로 변경합니다. 마지막 `status` 컬럼은 명백히 `categorical` 데이터입니다.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf['year'] = pd.to_datetime(df['year'])\ndf['n_sales'] = df['n_sales'].str.strip('EA').astype('int')\ndf['status'] = df['status'].astype('category')\n```\n:::\n\n\n위의 `to_datatime()`과 `astype()`함수를 이용해서 각 컬럼을 'datetime', 'int', 'categorical' 타입으로 변경했습니다. 단위를 제거하기 위해서 'strip()' 함수를 사용한 것을 참고하세요.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype         \n---  ------   --------------  -----         \n 0   year     5 non-null      datetime64[ns]\n 1   n_sales  5 non-null      int64         \n 2   status   5 non-null      category      \ndtypes: category(1), datetime64[ns](1), int64(1)\nmemory usage: 345.0 bytes\n```\n:::\n:::\n\n\n수정된 데이터 프레임은 올바른 데이터 타입을 갖습니다. 이제 데이터프레임의 통계정보를 확인하겠습니다.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf['n_sales'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ncount      5.000000\nmean      76.000000\nstd       82.643814\nmin       10.000000\n25%       20.000000\n50%       40.000000\n75%      100.000000\nmax      210.000000\nName: n_sales, dtype: float64\n```\n:::\n:::\n\n\n이제 예상한 것과 같이 `n_sales`에 대한 `평균`, `표준편차` 등의 통계정보를 확인할 수 있습니다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}