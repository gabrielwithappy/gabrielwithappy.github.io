{
  "hash": "1719d322c1aea3f0b46efd31ada0c9cb",
  "result": {
    "markdown": "---\ntitle: Pandas 데이터프레임 머지\nsubtitle: Pandas 데이터프레임 머지하기\ndescription:\n  Pandas 데이터프레임을 머지하는 방법을 정리합니다.\ncategories:\n  - Pandas\nauthor: gabriel yang\ndate: \"09/11/2023\"\nimage: \"https://picsum.photos/id/111/200/150\"\n# image-alt: \"deep learning glossary\"\npage-layout: article\n---\n\n# 테이터프레임 머지하기\n\n병합은 서로다른 데이터프레임 객체에 동일하게 존재하는 값을 통해 양쪽 데이터를 연관 지어 하나의 데이터프레임으로 모델링할 수 있는 유용한 방법입니다. 연습을 위해서 데이터를 준비합니다.\n\n`Yahoo Finance`에서는 미국뿐 아니라 한국 주식에 대한 정보를 제공합니다. `KOSPI`주식 정보를 csv형태로 저장해서 데이터프레임 머지 연습에 사용할께요. [Yahoo Finance](https://finance.yahoo.com/quote/%5EKS11?p=%5EKS11&.tsrc=fin-srch)로 이동해서 `historica l data` 탭을 선택합니다.\n\n![](images/paste-1.png)\n\n`Historical Data` 를 선택하면 위와 같이 `KOSPI` 에 대한 시계열 데이터를 얻을 수 있습니다. `download`를 눌러 다운로드하여 저장합니다. 혹은 [[KS11.csv](/website/docs/blog/posts/2023/09/2023-09-11-pandas-merge/KS11.csv)]에서 다운로드 하세요.\n\n## 데이터 로드하기\n\ncsv파일을 불러와서 데이터프레임 형태를 확인합니다. 시계열데이터의 경우 날짜정보를 데이터프레임의 `index`로 사용하면 편리합니다. `data`컬럼을 index로 설정합니다.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nkospi = pd.read_csv(\"./^KS11.csv\", index_col ='Date')\nkospi.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-09-13</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>366900</td>\n    </tr>\n    <tr>\n      <th>2022-09-14</th>\n      <td>2390.469971</td>\n      <td>2418.419922</td>\n      <td>2381.500000</td>\n      <td>2411.419922</td>\n      <td>2411.419922</td>\n      <td>461300</td>\n    </tr>\n    <tr>\n      <th>2022-09-15</th>\n      <td>2416.010010</td>\n      <td>2421.629883</td>\n      <td>2401.830078</td>\n      <td>2401.830078</td>\n      <td>2401.830078</td>\n      <td>423900</td>\n    </tr>\n    <tr>\n      <th>2022-09-16</th>\n      <td>2387.560059</td>\n      <td>2395.100098</td>\n      <td>2371.110107</td>\n      <td>2382.780029</td>\n      <td>2382.780029</td>\n      <td>440300</td>\n    </tr>\n    <tr>\n      <th>2022-09-19</th>\n      <td>2388.729980</td>\n      <td>2389.850098</td>\n      <td>2352.760010</td>\n      <td>2355.659912</td>\n      <td>2355.659912</td>\n      <td>403700</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n날짜정보가 index로 설정된 데이터프레임을 생성했습니다. 이제 연결을 위한 새로운 데이터프레임을 생성합니다. 데이트 프레임을 연결할 정보를 `Ticker`라는 컬럼으로 설정하고 기존 데이터프레임의 `Volume`컬럼을 추가합니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nkospi_volume = pd.DataFrame ({'Ticker': 'kospi', 'Volume' : kospi['Volume']})\nkospi_volume.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Ticker</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-09-13</th>\n      <td>kospi</td>\n      <td>366900</td>\n    </tr>\n    <tr>\n      <th>2022-09-14</th>\n      <td>kospi</td>\n      <td>461300</td>\n    </tr>\n    <tr>\n      <th>2022-09-15</th>\n      <td>kospi</td>\n      <td>423900</td>\n    </tr>\n    <tr>\n      <th>2022-09-16</th>\n      <td>kospi</td>\n      <td>440300</td>\n    </tr>\n    <tr>\n      <th>2022-09-19</th>\n      <td>kospi</td>\n      <td>403700</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n2개의 데이터프레임이 함께 갖는 컬럼인 'Ticker'를 통해서 병합을 진행하고 이를 통해서 `Volume`정보를 추가하려고 합니다. 올바르게 동작하는 지 확인하기 위해서 기존 데이터프레임의 `Volume` 컬럼을 삭제합니다.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nkospi['Ticker'] = 'kospi'\nkospi.pop('Volume')\nkospi.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Ticker</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-09-13</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>kospi</td>\n    </tr>\n    <tr>\n      <th>2022-09-14</th>\n      <td>2390.469971</td>\n      <td>2418.419922</td>\n      <td>2381.500000</td>\n      <td>2411.419922</td>\n      <td>2411.419922</td>\n      <td>kospi</td>\n    </tr>\n    <tr>\n      <th>2022-09-15</th>\n      <td>2416.010010</td>\n      <td>2421.629883</td>\n      <td>2401.830078</td>\n      <td>2401.830078</td>\n      <td>2401.830078</td>\n      <td>kospi</td>\n    </tr>\n    <tr>\n      <th>2022-09-16</th>\n      <td>2387.560059</td>\n      <td>2395.100098</td>\n      <td>2371.110107</td>\n      <td>2382.780029</td>\n      <td>2382.780029</td>\n      <td>kospi</td>\n    </tr>\n    <tr>\n      <th>2022-09-19</th>\n      <td>2388.729980</td>\n      <td>2389.850098</td>\n      <td>2352.760010</td>\n      <td>2355.659912</td>\n      <td>2355.659912</td>\n      <td>kospi</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n`Volume`컬럼이 삭제되었으니 병합을 진행합니다. `pd.merge()`함수를 사용하고 공통 컬럼인 `Ticker`컬럼을 전달합니다.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmerged_df = pd.merge(kospi, kospi_volume, on='Ticker')\nmerged_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Ticker</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>kospi</td>\n      <td>366900</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>kospi</td>\n      <td>461300</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>kospi</td>\n      <td>423900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>kospi</td>\n      <td>440300</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2418.590088</td>\n      <td>2453.949951</td>\n      <td>2418.590088</td>\n      <td>2449.540039</td>\n      <td>2449.540039</td>\n      <td>kospi</td>\n      <td>403700</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n이제 새로운 `merged_df` 데이터프레임은 2개의 데이터프레임을 연결하여 `Volume`정보를 추가 하였습니다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}